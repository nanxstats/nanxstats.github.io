<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R Markdown on Nan Xiao | 肖楠</title>
    <link>https://nanx.me/tags/r-markdown/</link>
    <description>Recent content in R Markdown on Nan Xiao | 肖楠</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 06 Jun 2023 20:30:00 +0000</lastBuildDate><atom:link href="https://nanx.me/tags/r-markdown/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Error in options[[sprintf(&#34;fig.%s&#34;, i)]] * options$dpi: ! non-numeric argument to binary operator</title>
      <link>https://nanx.me/blog/post/knitr-chunk-option-error/</link>
      <pubDate>Tue, 06 Jun 2023 20:30:00 +0000</pubDate>
      
      <guid>https://nanx.me/blog/post/knitr-chunk-option-error/</guid>
      <description>Photo by Timothy Dykes. If Google leads you here, you probably have assigned a character value to a knitr chunk option such as fig.width or fig.height that only accepts numeric values, and your are trying to render that R Markdown or Quarto document.
For example, it is easy to make this mistake:
```{r, fig.width=&amp;quot;100%&amp;quot;} plot(1:10) ``` where you probably meant:
```{r, fig.width=6, out.width=&amp;quot;100%&amp;quot;} plot(1:10) ``` That’s all! I hope this helps.</description>
    </item>
    
    <item>
      <title>Compressing PNG Output for R Packages with pngquant and ragg</title>
      <link>https://nanx.me/blog/post/rpkgs-pngquant-ragg/</link>
      <pubDate>Sun, 09 Apr 2023 00:30:00 +0000</pubDate>
      
      <guid>https://nanx.me/blog/post/rpkgs-pngquant-ragg/</guid>
      <description>Cassette collection. Photo by Jametlene Reskp. Introduction Dealing with large-scale image outputs in R packages can be challenging, especially when it comes to passing CRAN checks. In this blog post, I will share my experience in using pngquant and ragg to compress the PNG output size for readme and vignettes. This allows R packages with many figures in their documentation to pass the CRAN checks without compromising image quality.</description>
    </item>
    
    <item>
      <title>Bolden Your Typography in R Markdown and Quarto with MLModern</title>
      <link>https://nanx.me/blog/post/mlmodern/</link>
      <pubDate>Mon, 20 Mar 2023 16:00:00 +0000</pubDate>
      
      <guid>https://nanx.me/blog/post/mlmodern/</guid>
      <description>A visual comparison between Latin Modern (blue) and MLModern (red) at the same size. You probably have created PDF documents using R Markdown or Quarto. The default look and feel of these documents are driven by the default typeface, Computer Modern, or its extended implementation, Latin Modern.
To me, these default typefaces work fine, but they could be “thicker” to be more legible on HiDPI and Retina displays. MLModern offers such a sturdy rendition of the Computer Modern design.</description>
    </item>
    
    <item>
      <title>A General-Purpose Link Checker for R Markdown and Quarto Projects</title>
      <link>https://nanx.me/blog/post/rmarkdown-quarto-link-checker/</link>
      <pubDate>Mon, 16 Jan 2023 20:30:00 +0000</pubDate>
      
      <guid>https://nanx.me/blog/post/rmarkdown-quarto-link-checker/</guid>
      <description>The link checker code in this post is also available in this GitHub Gist.
Puffins in the rain, Iceland. Photo by Yves Alarie.
Previously on link checking… We discussed the link rot issue before. We also built a simple link checker for blogdown projects based on the XML sitemap generated by Hugo. In reality, I maintain many more bookdown projects and Quarto projects than blogdown projects. Searching site: bookdown::bookdown_sitealso shows that there are 10,000+ bookdown projects hosted on GitHub alone.</description>
    </item>
    
    <item>
      <title>Building Paginated News Lists in R Markdown and Shiny with DT</title>
      <link>https://nanx.me/blog/post/dt-news-list/</link>
      <pubDate>Sun, 10 Apr 2022 01:00:00 +0000</pubDate>
      
      <guid>https://nanx.me/blog/post/dt-news-list/</guid>
      <description>The R code in this post is also available as this GitHub Gist.
Mosaic Mondrian. Original photo by Simon Lee.
Context and motivation A single-file R Markdown document often generates single-page HTML outputs. Similarly, Shiny is a single-page application framework. The single-page nature of these outputs makes it challenging to create experiences like pagination to display long and sophisticated lists, which is usually accomplished by creating multiple pages and URL routing.</description>
    </item>
    
    <item>
      <title>Customize Syntax Highlighting for R distill Websites</title>
      <link>https://nanx.me/blog/post/distill-syntax-highlight/</link>
      <pubDate>Fri, 22 May 2020 00:30:00 +0000</pubDate>
      
      <guid>https://nanx.me/blog/post/distill-syntax-highlight/</guid>
      <description>“Diversity is essential to happiness, and in Utopia there is hardly any.” (Bertrand Russell) Photo by @chuttersnap.
The Problem The distill (formerly radix) package offers an excellent option in the R Markdown ecosystem to create beautifully typed websites. I was using it one day and looking into customizing the syntax highlighting theme. Then I found this issue:
I was a bit surprised and sad that there is no easy way to customize it.</description>
    </item>
    
  </channel>
</rss>
