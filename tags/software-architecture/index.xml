<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software architecture on Nan Xiao | 肖楠</title>
    <link>https://nanx.me/tags/software-architecture/</link>
    <description>Recent content in software architecture on Nan Xiao | 肖楠</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 27 Jun 2023 22:00:00 +0000</lastBuildDate><atom:link href="https://nanx.me/tags/software-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Base R Shortcuts: A Collection of Lesser-Known Idioms and Coding Patterns for Writing Concise and Fast R Code</title>
      <link>https://nanx.me/blog/post/r-base-shortcuts/</link>
      <pubDate>Tue, 27 Jun 2023 22:00:00 +0000</pubDate>
      
      <guid>https://nanx.me/blog/post/r-base-shortcuts/</guid>
      <description>TL;DR: Please help me extend this GitHub repo by adding your own base R programming idioms today: https://github.com/nanxstats/r-base-shortcuts.
Snowboarder on a cloudy hill. Photo by Boba Jovanovic. For a long time, I’ve told people that I am not an R expert. I don’t know too much about R. I just happen to write software that encounters the least resistance when implemented in R. I’m shy. I’d rather solve problems myself than ask.</description>
    </item>
    
    <item>
      <title>Rethinking the Word Cloud Generator</title>
      <link>https://nanx.me/blog/post/rethinking-word-cloud-generator/</link>
      <pubDate>Mon, 19 Jun 2023 18:00:00 +0000</pubDate>
      
      <guid>https://nanx.me/blog/post/rethinking-word-cloud-generator/</guid>
      <description>As part of my JavaScript learning journey, I created a fork of Jason Davies’ word cloud generator and added some new features with a few adjustments to the default parameters. The fork is hosted at nanx.me/wordcloud/ and the source code is available on GitHub. Here is an example word cloud produced by the generator:
A word cloud visualization for ChatGPT release notes produced by the generator with default parameters. Font: Founders Grotesk Condensed Regular (included with macOS).</description>
    </item>
    
    <item>
      <title>Sensible Defaults</title>
      <link>https://nanx.me/blog/post/sensible-defaults/</link>
      <pubDate>Tue, 07 Jun 2022 00:30:00 +0000</pubDate>
      
      <guid>https://nanx.me/blog/post/sensible-defaults/</guid>
      <description>Photo by Thomas Reaubourg.
gtsummary The other day, I looked into Daniel Sjoberg’s gtsummary package for summarizing tabular data and regression models. The README says:
The {gtsummary} package summarizes data sets, regression models, and more, using sensible defaults with highly customizable capabilities.
The concept of having sensible defaults in (research) software immediately resonated with me. Ideally, the default settings in software should be able to support the majority of users’ needs.</description>
    </item>
    
    <item>
      <title>Architecting Large Shiny Apps with Minimal First Contentful Paint Time</title>
      <link>https://nanx.me/blog/post/shiny-fcp-loader/</link>
      <pubDate>Wed, 30 Mar 2022 22:00:00 +0000</pubDate>
      
      <guid>https://nanx.me/blog/post/shiny-fcp-loader/</guid>
      <description>The Shiny app skeleton is available from nanxstats/shiny-fcp-loader.
Pantheon, Roma, Italy. Photo by Emma Fabbri.
More than a few people asked me similar questions about this when building large shiny apps. Therefore, it might be time to formulate a simple solution with a minimalist yet extensible code demo.
UX side effects of large Shiny apps For larger Shiny apps, users could wait a long time (in terms of 10s of seconds) with an awkward blank screen before seeing the rendered app content.</description>
    </item>
    
  </channel>
</rss>
