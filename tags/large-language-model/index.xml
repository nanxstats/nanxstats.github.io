<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>large language model on Nan Xiao | 肖楠</title>
    <link>https://nanx.me/tags/large-language-model/</link>
    <description>Recent content in large language model on Nan Xiao | 肖楠</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 01 Sep 2025 23:01:00 +0000</lastBuildDate>
    <atom:link href="https://nanx.me/tags/large-language-model/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The trash can has become the trashed can</title>
      <link>https://nanx.me/blog/post/trash-can/</link>
      <pubDate>Mon, 01 Sep 2025 23:01:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/trash-can/</guid>
      <description>A Vanitas Still Life with a Flag, Candlestick, Musical Instruments, Books, Writing Paraphernalia, Globes, and Hourglass, 1662. Edwaert Collier (Dutch, 1642–1708).&#xA;Scan from the Art Institute of Chicago. I have posted exclusively technical content on this blog for the past five years. Today, I want to write something different.&#xA;I have been using a 45-liter step trash can with a soft-close lid in the kitchen. Most of it is plastic.</description>
    </item>
    <item>
      <title>Markdown Stupefy: Tidy AI Text in VS Code</title>
      <link>https://nanx.me/blog/post/vscode-markdown-stupefy/</link>
      <pubDate>Fri, 15 Aug 2025 01:32:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/vscode-markdown-stupefy/</guid>
      <description>The extension name was inspired by the “stupefy mode” described in the SmartyPants project written by John Gruber, the creator of Markdown. If you copy AI responses into Markdown, you will often get curly quotes, em dashes, emojis, and other smart punctuation. They look fine, but they are Unicode characters that can trip linters and clutter diffs. So I built a tiny tool to fix that.&#xA;Automate tidying AI text Markdown Stupefy is a VS Code extension that normalizes smart punctuation to plain ASCII, removes emojis, and cleans up trailing whitespace.</description>
    </item>
    <item>
      <title>Refactoring the GPU Selector App with Claude Code: A Vibe Coding Experiment</title>
      <link>https://nanx.me/blog/post/claude-code-vibe-refactor/</link>
      <pubDate>Fri, 13 Jun 2025 01:03:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/claude-code-vibe-refactor/</guid>
      <description>Desk setup with plants. Photo by Amari James. In January 2023, I built a basic, interactive deep learning GPU selector app inspired by Tim Dettmers’ popular guide. The original project was a pure HTML + JavaScript + CSS “vibe coding” experiment, driven by chat with GPT-3.5, which was the SOTA at the time. While the core logic worked, I did not focus much on its UI or UX.&#xA;Now, two and a half years later, I wanted to see how far agentic coding assistants have come, by refactoring the app with modern tools and design sensibilities.</description>
    </item>
    <item>
      <title>You should (maybe) enable font ligatures when building with GPT models</title>
      <link>https://nanx.me/blog/post/gpt-models-font-ligatures/</link>
      <pubDate>Wed, 19 Jun 2024 03:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/gpt-models-font-ligatures/</guid>
      <description>Parts of a typewriter. Photo by Florian Klauer. The token &amp;lt;|endoftext|&amp;gt; is a special token used as a document separator for OpenAI GPT models. It has become quite prevalent if you look closely:&#xA;It has been used since GPT-2 and remains present in the OpenAI API for their latest models. Their tokenizer package, tiktoken, includes logic to process text with these special tokens. The markup &amp;lt;| and |&amp;gt; is widely used in the code bases of LangChain and text-generation-webui.</description>
    </item>
    <item>
      <title>Prompt LLMs with R Package Source Code Using pkglite</title>
      <link>https://nanx.me/blog/post/pkglite-llm-prompt/</link>
      <pubDate>Thu, 28 Mar 2024 20:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/pkglite-llm-prompt/</guid>
      <description>Illustration from Google DeepMind. Artist: Martina Stiftinger. Sometimes, large language models (LLMs) answer coding questions by making up software behaviors or APIs that don’t exist. A simple but effective strategy to minimize such hallucination problems is to feed the exact, complete source code as context in the prompt. For code organized in R packages, it is tedious to copy the file contents and construct them into prompts manually. Fortunately, you can use pkglite to automate this process.</description>
    </item>
  </channel>
</rss>
