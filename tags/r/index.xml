<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Nan Xiao | 肖楠</title>
    <link>https://nanx.me/tags/r/</link>
    <description>Recent content in R on Nan Xiao | 肖楠</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 09 Feb 2025 20:42:00 +0000</lastBuildDate>
    <atom:link href="https://nanx.me/tags/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prevent RStudio 2024.12.0 from adding ProjectID to .Rproj files</title>
      <link>https://nanx.me/blog/post/rstudio-projectid/</link>
      <pubDate>Sun, 09 Feb 2025 20:42:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/rstudio-projectid/</guid>
      <description>Git diff showing the ProjectID field added by RStudio 2024.12.0.&#xA;Terminal: Ghostty. Theme: Dracula+. Font family: Iosevka Term. TL;DR: The fix The following script detects newly added ProjectID lines in .Rproj files using git diff. If detected, it removes the line and saves the modified .Rproj file.&#xA;# Remove ProjectID from .Rproj files if freshly added local({ xfun &amp;lt;- requireNamespace(&amp;quot;xfun&amp;quot;, quietly = TRUE) rproj_files &amp;lt;- list.files(pattern = &amp;quot;\\.Rproj$&amp;quot;, full.names = TRUE) if (!</description>
    </item>
    <item>
      <title>Customize testthat snapshot directory with monkey patching</title>
      <link>https://nanx.me/blog/post/testthat-snapshot-monkey-patch/</link>
      <pubDate>Sun, 05 Jan 2025 22:58:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/testthat-snapshot-monkey-patch/</guid>
      <description>Memories instant photo. Photo by Kelly Sikkema. Problem Snapshot testing has been supported in testthat since testthat 3.0.0. By default, snapshot files are saved to a hardcoded directory:&#xA;tests/testthat/_snaps/ Unfortunately, testthat does not provide a public API to customize this directory. This question has been raised in issues like r-lib/testthat#1623, suggesting that customizing the snapshot directory is a valid use case.&#xA;Solution Without a public API, the most practical solution is to modify testthat’s internal behavior at runtime through monkey patching.</description>
    </item>
    <item>
      <title>Skip RStudio splash screen</title>
      <link>https://nanx.me/blog/post/rstudio-splash-screen/</link>
      <pubDate>Tue, 17 Dec 2024 00:42:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/rstudio-splash-screen/</guid>
      <description>Skating at Venice Beach, Los Angeles. Photo by Josh Hild. Starting with RStudio IDE version 2024.12.0+467, a redesigned splash screen replaces the previous app logo. This change was introduced in rstudio/rstudio#15347 and it looks like this:&#xA;New splash screen design in RStudio IDE 2024.12+. While visually polished, the new splash screen feels slightly too shiny (no pun intended) and adds a delay to the perceived time before I can first interact with the UI.</description>
    </item>
    <item>
      <title>R command-line tool paths on Windows</title>
      <link>https://nanx.me/blog/post/r-windows-paths/</link>
      <pubDate>Sun, 15 Sep 2024 19:28:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/r-windows-paths/</guid>
      <description>Mirror House. Photo by Karsten Winegeart. I’m glad to share a new repository that documents the essential R command-line tool paths on Windows: https://github.com/nanxstats/r-windows-paths.&#xA;Motivation As an R developer, I frequently set up new development and testing environments for my R packages on Windows. This process often involves installing several command-line tools alongside R, including but not limited to:&#xA;Rtools: Compiles C/C++/Fortran code. TinyTeX: Compiles reference manual and PDF vignettes.</description>
    </item>
    <item>
      <title>ssw is on CRAN</title>
      <link>https://nanx.me/blog/post/ssw-0-2-0/</link>
      <pubDate>Sun, 08 Sep 2024 19:07:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/ssw-0-2-0/</guid>
      <description>Cape Cod sand dunes on a cloudy day. Photo by Nicholas Bartos. I’m excited to share that my R package ssw is now available on CRAN. This package began as a weekend project in 2020. ssw offers an R interface for SSW (Zhao et al. 2013), a high-performance C/C++ implementation of the Smith-Waterman algorithm for sequence alignment using SIMD.&#xA;You can install ssw from CRAN with:&#xA;install.packages(&amp;quot;ssw&amp;quot;) For clarity, I will refer the R package as ssw-r from now on.</description>
    </item>
    <item>
      <title>ggsci 3.2.0: new color palettes from Observable, Bootstrap, and Tailwind CSS</title>
      <link>https://nanx.me/blog/post/ggsci-3-2-0/</link>
      <pubDate>Sat, 06 Jul 2024 00:20:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/ggsci-3-2-0/</guid>
      <description>Villa in Zurich, perspective view. From “Moderne Architektur” (Modern Architecture), edited by Lambert &amp;amp; Stahl, Stuttgart, 1891. Scan from Europeana. I am delighted to announce the release of ggsci 3.2.0. The R package ggsci was first released in 2016. It offers a range of ggplot2 color scales drawn from various sources, including scientific publications, data visualization tools, sci-fi movies, and television series.&#xA;To install ggsci from CRAN, use:&#xA;install.packages(&amp;quot;ggsci&amp;quot;) As a follow-up to the ggsci 3.</description>
    </item>
    <item>
      <title>ggsci 3.1.0, ggsurvfit example, and reverse dependency check</title>
      <link>https://nanx.me/blog/post/ggsci-3-1-0/</link>
      <pubDate>Thu, 23 May 2024 00:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/ggsci-3-1-0/</guid>
      <description>Photo by Elena Mozhvilo. I am excited to announce the release of ggsci 3.1.0. ggsci is an R package that provides a collection of color palettes inspired by colors used in scientific journals, data visualization libraries, science fiction movies, and TV shows.&#xA;To install ggsci from CRAN, run:&#xA;install.packages(&amp;quot;ggsci&amp;quot;) This release introduces a new color scale and brings documentation improvements. This post demonstrates how to create a Kaplan-Meier plot using ggsurvfit, cowplot, and ggsci.</description>
    </item>
    <item>
      <title>msaenet 3.1.2 and a sparse survival modeling example</title>
      <link>https://nanx.me/blog/post/msaenet-3-1-2/</link>
      <pubDate>Sun, 12 May 2024 20:10:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/msaenet-3-1-2/</guid>
      <description>Father-Son Tennis. Photo by Lucas Davies. I’m pleased to announce that msaenet 3.1.2 is now available on CRAN.&#xA;You can install msaenet with:&#xA;install.packages(&amp;quot;msaenet&amp;quot;) If you frequently build sparse linear models, msaenet can help you generate more parsimonious solutions with adaptive estimations. It supports any number of adaptive estimation steps, flexible initialization methods, multiple model selection criteria, and automatic parallel parameter tuning.&#xA;New color palette This is a more focused update compared to the 3.</description>
    </item>
    <item>
      <title>stackgbm is on CRAN</title>
      <link>https://nanx.me/blog/post/stackgbm-0-1-0/</link>
      <pubDate>Tue, 30 Apr 2024 08:10:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/stackgbm-0-1-0/</guid>
      <description>A group of sheep on Faroe Islands. Photo by Dylan Shaw. I’m happy to announce that stackgbm, a minimalist R package for tree model stacking, is now on CRAN. Model stacking is an ensemble learning method that combines the predictions from multiple base learners to improve overall performance. stackgbm makes it easy to stack gradient boosting decision tree (GBDT) models, which are particularly effective for classification tasks.&#xA;You can install stackgbm with:</description>
    </item>
    <item>
      <title>R Package Release Notes: ggsci, protr, and msaenet (Spring 2024)</title>
      <link>https://nanx.me/blog/post/ggsci-protr-msaenet-release-notes-2024/</link>
      <pubDate>Sun, 21 Apr 2024 19:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/ggsci-protr-msaenet-release-notes-2024/</guid>
      <description>Cute market in Rome, Italy. Photo by Mark Pecar. Maintaining R packages is a significant time and effort commitment. The Releasing to CRAN chapter of the R Packages book provides an excellent overview of the many responsibilities package authors face. Henrik’s CRANhaven also helps me appreciate the efforts made by both CRAN maintainers and package maintainers to keep a consistent, high standard on software quality and integration within a single, trusted repository.</description>
    </item>
    <item>
      <title>Prompt LLMs with R Package Source Code Using pkglite</title>
      <link>https://nanx.me/blog/post/pkglite-llm-prompt/</link>
      <pubDate>Thu, 28 Mar 2024 20:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/pkglite-llm-prompt/</guid>
      <description>Illustration from Google DeepMind. Artist: Martina Stiftinger. Sometimes, large language models (LLMs) answer coding questions by making up software behaviors or APIs that don’t exist. A simple but effective strategy to minimize such hallucination problems is to feed the exact, complete source code as context in the prompt. For code organized in R packages, it is tedious to copy the file contents and construct them into prompts manually. Fortunately, you can use pkglite to automate this process.</description>
    </item>
    <item>
      <title>Use STIX Fonts in R Markdown and Quarto for Readability</title>
      <link>https://nanx.me/blog/post/stixfonts/</link>
      <pubDate>Mon, 15 Jan 2024 21:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/stixfonts/</guid>
      <description>Seashore with Shipwreck by Moonlight by Caspar David Friedrich. I have been playing a lot of Elden Ring lately. After investing 200 (!) hours into it, I learned three valuable lessons:&#xA;Life is hard. Something that seems unachievable today doesn’t mean it will be tomorrow. Explore, learn, practice, and with efforts, and perhaps a little luck, suddenly, you’ve done it. Life is unfair. You can choose to play aggressively, play conservatively, or even move on—just don’t be greedy.</description>
    </item>
    <item>
      <title>protr 1.7-0</title>
      <link>https://nanx.me/blog/post/protr-1-7-0/</link>
      <pubDate>Fri, 10 Nov 2023 21:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/protr-1-7-0/</guid>
      <description>3D render from Google DeepMind. Artist: Wes Cockx. I am glad to announce the release of protr 1.7-0. Install it from CRAN with:&#xA;install.packages(&amp;quot;protr&amp;quot;) You can also install it from conda-forge in Python.&#xA;First released in 2012, protr was my very first open source R package. The package generates representations for protein sequences such as numerical features and similarity measures. Since its inception, protr has evolved after 21 CRAN releases by incorporating user feedback.</description>
    </item>
    <item>
      <title>Base R Shortcuts: A Repository of Efficient Base R Coding Patterns</title>
      <link>https://nanx.me/blog/post/r-base-shortcuts/</link>
      <pubDate>Tue, 27 Jun 2023 22:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/r-base-shortcuts/</guid>
      <description>TL;DR: Please help me extend this GitHub repo by adding your own base R programming idioms: https://github.com/nanxstats/r-base-shortcuts.&#xA;Snowboarder on a cloudy hill. Photo by Boba Jovanovic. For a long time, I’ve told people that I am not an R expert. I don’t know too much about R. I just happen to write software that encounters the least resistance when implemented in R. I’m shy. I’d rather solve problems myself than ask.</description>
    </item>
    <item>
      <title>Context-Free R Package Release Checklist Generation with usethis</title>
      <link>https://nanx.me/blog/post/r-package-release-checklist/</link>
      <pubDate>Mon, 12 Jun 2023 20:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/r-package-release-checklist/</guid>
      <description>The release checklist generation function described in this post is also available in this GitHub Gist.&#xA;Photo by David Marcu. Software release at scale An agile, automated, and reliable release process is a key component of continuous delivery for modern software engineering teams. In particular, releasing new versions of R packages often involves going through a sequence of manual and automated checks to ensure quality and compliance. To scale up such efforts within a development team, it is crucial to follow a consistent release checklist.</description>
    </item>
    <item>
      <title>Fix the &#39;non-numeric argument to binary operator&#39; Error in R Markdown and Quarto</title>
      <link>https://nanx.me/blog/post/knitr-chunk-option-error/</link>
      <pubDate>Tue, 06 Jun 2023 20:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/knitr-chunk-option-error/</guid>
      <description>Rubber duck debugging. Photo by Timothy Dykes. If Google leads you here, you probably assigned a character value to a knitr chunk option such as fig.width or fig.height that only accepts numeric values, and your are trying to render that R Markdown or Quarto document.&#xA;The exact error message you encountered looks like this:&#xA;Error in `options[[sprintf(&amp;quot;fig.%s&amp;quot;, i)]] * options$dpi`: ! non-numeric argument to binary operator Backtrace: 1. rmarkdown::render(&amp;quot;example.Rmd&amp;quot;, encoding = &amp;quot;UTF-8&amp;quot;) 2.</description>
    </item>
    <item>
      <title>Responsive Design for Statistical Graphics with Shiny and ggplot2</title>
      <link>https://nanx.me/blog/post/responsive-design-for-statistical-graphics/</link>
      <pubDate>Mon, 05 Jun 2023 01:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/responsive-design-for-statistical-graphics/</guid>
      <description>Photo by Amy Shamblen. If you have written any Shiny apps, you are probably familiar with the idea of responsive web design, which focuses on web page layouts adaptive to screen size and popularized by the front-end frameworks such as Bootstrap.&#xA;Could the similar idea be applied to statistical graphics? In my opinion, the answer is yes, and the idea can be helpful for arranging multi-panel graphics under the context of creating effective visualizations that are adaptive to any screen sizes.</description>
    </item>
    <item>
      <title>Sparse Index Tracking with msaenet and CVXR: A Two-Stage Regression Approach</title>
      <link>https://nanx.me/blog/post/sparse-index-tracking/</link>
      <pubDate>Wed, 31 May 2023 01:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/sparse-index-tracking/</guid>
      <description>The code to reproduce the results in this post is also available here.&#xA;The illusion of choice. Photo by Kenny Eliason. Disclaimer The content in this blog post is for educational and research purposes only. It is not intended to be investment advice, and the author is not a licensed financial advisor. Any investment decisions should be based on your own analysis and consultation with a licensed financial advisor. The author is not responsible for any financial losses or damages resulting from the use of this information.</description>
    </item>
    <item>
      <title>Compressing PNG Output for R Packages with pngquant and ragg</title>
      <link>https://nanx.me/blog/post/rpkgs-pngquant-ragg/</link>
      <pubDate>Sun, 09 Apr 2023 00:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/rpkgs-pngquant-ragg/</guid>
      <description>Cassette collection. Photo by Jametlene Reskp. Introduction Dealing with large-scale image outputs in R packages can be challenging, especially when it comes to passing CRAN checks. In this post, I will share my experience in using pngquant and ragg to compress the PNG output size for readme and vignettes. This allows R packages with many figures in their documentation to pass the CRAN checks without compromising image quality.&#xA;Problem description I encountered a problem with my package, ggsci, which outputs approximately 30 example figures from both vignettes and README.</description>
    </item>
    <item>
      <title>ggsci 3.0.0</title>
      <link>https://nanx.me/blog/post/ggsci-3-0-0/</link>
      <pubDate>Wed, 08 Mar 2023 11:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/ggsci-3-0-0/</guid>
      <description>3D render from Rodion Kutsaiev. I am delighted to announce the release of ggsci 3.0.0. ggsci provides a collection of color palettes inspired by colors used in scientific journals, data visualization libraries, science fiction movies, and TV shows.&#xA;You can install it from CRAN with:&#xA;install.packages(&amp;quot;ggsci&amp;quot;) This version brings 7 new color palettes under 3 color scales (COSMIC, Flat UI, Frontiers), multiple improvements, and a new FAQ vignette, giving you more options to create effective data visualizations using ggplot2.</description>
    </item>
    <item>
      <title>A General-Purpose Link Checker for R Markdown and Quarto Projects</title>
      <link>https://nanx.me/blog/post/rmarkdown-quarto-link-checker/</link>
      <pubDate>Mon, 16 Jan 2023 20:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/rmarkdown-quarto-link-checker/</guid>
      <description>The link checker code in this post is also available in this GitHub Gist.&#xA;Puffins in the rain, Iceland. Photo by Yves Alarie.&#xA;Previously on link checking… We discussed the link rot issue before. We also built a simple link checker for blogdown projects based on the XML sitemap generated by Hugo. In reality, I maintain many more bookdown projects and Quarto projects than blogdown projects. Searching site: bookdown::bookdown_sitealso shows that there are 10,000+ bookdown projects hosted on GitHub alone.</description>
    </item>
    <item>
      <title>New Paper Published: eCTD Submission with Analysis Using R</title>
      <link>https://nanx.me/blog/post/ectd-pkglite-paper/</link>
      <pubDate>Wed, 28 Sep 2022 11:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/ectd-pkglite-paper/</guid>
      <description>Photo by DeepMind.&#xA;I am thrilled to share that our paper, Electronic Common Technical Document Submission with Analysis Using R, is published online today in Clinical Trials. We have selected the open access (OA) option to ensure that everyone in the community can check out the full text freely.&#xA;A simple solution to a complex problem Our article presented a viable path to prepare proprietary R assets for submission, following the electronic common technical document (eCTD) specification.</description>
    </item>
    <item>
      <title>Training Tissue-Specific Gene Embeddings on GTEx Data</title>
      <link>https://nanx.me/blog/post/exp2vec/</link>
      <pubDate>Sun, 21 Aug 2022 19:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/exp2vec/</guid>
      <description>The gene embedding training code is available from https://github.com/nanxstats/exp2vec.&#xA;The Shiny app is at https://nanx.shinyapps.io/exp2vec/, with code available from https://github.com/nanxstats/exp2vec-shiny.&#xA;Photo by Amy Shamblen.&#xA;Background We can often observe a mysterious connection between natural languages and the human genome when count data is derived from them. It is also straightforward to model them using the latest statistical or machine learning approaches developed for each field and borrow ideas from each other.</description>
    </item>
    <item>
      <title>Automate HTML to PDF Printing with {promises} and {chromote}</title>
      <link>https://nanx.me/blog/post/chromote-pdf-automation/</link>
      <pubDate>Sat, 20 Aug 2022 00:15:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/chromote-pdf-automation/</guid>
      <description>The R code in this post is also available in this GitHub Gist.&#xA;Photo by Bank Phrom.&#xA;chromote is an R package that allows one to automate tasks driven by web browsers. It works by providing an API to communicate with Chromium-based browsers via the Chrome DevTools Protocol (CDP). For example, CDP can help us load and print HTML pages to PDF files programmatically, similar to what one could do in the web browser GUI but with mouse clicks.</description>
    </item>
    <item>
      <title>The Past and Future of Shiny Keynote at rstudio::conf(2022)</title>
      <link>https://nanx.me/blog/post/shiny-keynote-rstudio-conf/</link>
      <pubDate>Wed, 17 Aug 2022 20:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/shiny-keynote-rstudio-conf/</guid>
      <description>I constantly feel lucky to witness the growth of the R web framework, Shiny, in the past ten years. In his keynote speech at rstudio::conf 2022, Joe Cheng shared an excellent summary of Shiny’s achievements and exciting outlook.&#xA;I am deeply moved by the story about how Shiny was created and Joe’s journey, and I recommend you watch the talk recording below if you haven’t. Notably, after Hadley’s Mastering Shiny book, the community-maintained awesome list awesome-shiny-extensions was again highlighted in Joe’s talk from 24:00 to 24:33 (thanks so much for the shout-out!</description>
    </item>
    <item>
      <title>Parsing Human-Readable Text Data with Readability.js and R</title>
      <link>https://nanx.me/blog/post/r-readability-parser/</link>
      <pubDate>Tue, 02 Aug 2022 01:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/r-readability-parser/</guid>
      <description>The R and JavaScript code to reproduce the results in this post is available from https://github.com/nanxstats/r-readability-parser.&#xA;Photo by Nick Hillier. Update (2023-09-04): Browserify support was removed in jsdom v22.0.0. This post has been updated to recommend installing jsdom v20.0.0 to ensure the code examples work as intended. The original versions of JS libraries in the GitHub repo remain unchanged, as they continue to function correctly.&#xA;Readability.js Maybe you have used tools like rvest to harvest text data from web pages.</description>
    </item>
    <item>
      <title>The zlib Algorithm for Text/Binary File Classification</title>
      <link>https://nanx.me/blog/post/txtvsbin/</link>
      <pubDate>Tue, 14 Jun 2022 20:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/txtvsbin/</guid>
      <description>The R code in this post is also available at this GitHub Gist.&#xA;Photo by Alp Duran.&#xA;Intro In some situations, we want to know whether a file is a text file or a binary file programmatically. For example, as a text editor developer, you can use this information to choose the correct editing interface (text editor or hex editor). Similarly, if you want to pack or compress a collection of files into a compact format, it helps to know the type of file before encoding them.</description>
    </item>
    <item>
      <title>Sensible Defaults</title>
      <link>https://nanx.me/blog/post/sensible-defaults/</link>
      <pubDate>Tue, 07 Jun 2022 00:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/sensible-defaults/</guid>
      <description>Photo by Thomas Reaubourg. gtsummary The other day, I looked into Daniel Sjoberg’s gtsummary package for summarizing tabular data and regression models. The README says:&#xA;The {gtsummary} package summarizes data sets, regression models, and more, using sensible defaults with highly customizable capabilities.&#xA;The concept of having sensible defaults in (research) software immediately resonated with me. Ideally, the default settings in software should be able to support the majority of users’ needs.</description>
    </item>
    <item>
      <title>Honey, I Serialized the Data</title>
      <link>https://nanx.me/blog/post/r-serialize-timemachine/</link>
      <pubDate>Sun, 01 May 2022 20:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/r-serialize-timemachine/</guid>
      <description>The R code to reproduce the results in this post is available from https://github.com/nanxstats/r-serialize-timemachine.&#xA;Photo by Alex Gogan.&#xA;A mystery on serialize() Serialization/deserialization is an important topic for exchanging data efficiently at scale. In R, there is a native choice for this: serialize()/unserialize() and their more convenient interface saveRDS()/readRDS().&#xA;Yihui once asked why the first 14 bytes in R serialized data were skipped in digest::digest(), instead of the first 17 bytes for the binary format, as the additional three filling zero-bytes are always there.</description>
    </item>
    <item>
      <title>Five Minute Shiny: Skeleton Loading Screen</title>
      <link>https://nanx.me/blog/post/shiny-loading-skeleton/</link>
      <pubDate>Sun, 24 Apr 2022 21:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/shiny-loading-skeleton/</guid>
      <description>The Shiny app template is available from nanxstats/shiny-loading-skeleton. Preview the demo at shinyapps.io.&#xA;Mosaic American Gothic. Original photo by Simon Lee.&#xA;Let’s implement a “skeleton loader” for Shiny apps. A typical animated skeleton loading screen looks like this:&#xA;A demo Shiny app with a skeleton loader. Recorded with QuickTime and converted by gifski.&#xA;Compared to the traditional loading screens provided by tools like waiter, the skeleton loading screen is a prominent way to show the app is currently loading and can give users an idea of the incoming page structure.</description>
    </item>
    <item>
      <title>Five Minute Shiny: File Input Area Widget</title>
      <link>https://nanx.me/blog/post/shiny-file-input-area/</link>
      <pubDate>Sun, 17 Apr 2022 21:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/shiny-file-input-area/</guid>
      <description>The R code in this post is also available as this GitHub Gist.&#xA;Photo by Willian Justen de Vasconcellos&#xA;Our goal today is to implement a file input area widget for Shiny. Compared to a regular file input button, a larger file input UI helps users focus on the task where an upload action is the central flow of the web application.&#xA;Fortunately, the native shiny::fileInput() offers a solid foundation for customization, as it already supports both click-to-browse and drag-and-drop for file selection.</description>
    </item>
    <item>
      <title>Five Minute Shiny: Implement the Switch Input with Bootstrap 5</title>
      <link>https://nanx.me/blog/post/shiny-bs5-switches/</link>
      <pubDate>Thu, 14 Apr 2022 00:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/shiny-bs5-switches/</guid>
      <description>The R code in this post is also available as this GitHub Gist.&#xA;Photo by Zonduurzaam Deventer. Bootstrap 4 and 5 have expanded the types of UI components compared to version 3. On the other hand, the available UI inputs and outputs in Shiny have been relatively stable while being carefully made compatible across different Bootstrap versions through bslib.&#xA;Since we can already leverage the native UI components in Bootstrap 5 via bslib, it would be fun to create the R wrappers for the “missing” inputs that were not available in Bootstrap 3.</description>
    </item>
    <item>
      <title>Building Paginated News Lists in R Markdown and Shiny with DT</title>
      <link>https://nanx.me/blog/post/dt-news-list/</link>
      <pubDate>Sun, 10 Apr 2022 01:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/dt-news-list/</guid>
      <description>The R code in this post is also available as this GitHub Gist.&#xA;Mosaic Mondrian. Original photo by Simon Lee.&#xA;Context and motivation A single-file R Markdown document often generates single-page HTML outputs. Similarly, Shiny is a single-page application framework. The single-page nature of these outputs makes it challenging to create experiences like pagination to display long and sophisticated lists, which is usually accomplished by creating multiple pages and URL routing.</description>
    </item>
    <item>
      <title>Adaptive ggplot2 Color Scales with Color Interpolation</title>
      <link>https://nanx.me/blog/post/ggplot2-color-interpolation/</link>
      <pubDate>Wed, 06 Apr 2022 01:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/ggplot2-color-interpolation/</guid>
      <description>Photo by Mateo Giraud. My R package ggsci has included a few popular discrete color palettes. The colors values in these palettes are not automatically generated from a color space but hand-picked instead, often containing only five to ten distinct colors. A frequent question from the users is: What should I do when the colors are running out due to a more significant number of categories in the data?</description>
    </item>
    <item>
      <title>Architecting Large Shiny Apps with Minimal First Contentful Paint Time</title>
      <link>https://nanx.me/blog/post/shiny-fcp-loader/</link>
      <pubDate>Wed, 30 Mar 2022 22:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/shiny-fcp-loader/</guid>
      <description>The Shiny app skeleton is available from nanxstats/shiny-fcp-loader.&#xA;Pantheon, Roma, Italy. Photo by Emma Fabbri.&#xA;More than a few people asked me similar questions about this when building large shiny apps. Therefore, it might be time to formulate a simple solution with a minimalist yet extensible code demo.&#xA;UX side effects of large Shiny apps For larger Shiny apps, users could wait a long time (in terms of 10s of seconds) with an awkward blank screen before seeing the rendered app content.</description>
    </item>
    <item>
      <title>A Simple Link Checker for Hugo and Blogdown Websites</title>
      <link>https://nanx.me/blog/post/link-checker/</link>
      <pubDate>Tue, 22 Feb 2022 20:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/link-checker/</guid>
      <description>Photo by Katie Treadway.&#xA;Some background I have been blogging with Hugo/blogdown for a while. One housekeeping task I have always wanted to automate with R is scanning the entire website to ensure that all the links are still working. It is essential for maintaining an enjoyable reading experience without archiving too many external links.&#xA;Conceptually, the requirement for a generic broken link checker is quite simple:&#xA;Get the links to all pages on the site.</description>
    </item>
    <item>
      <title>Font Variant Numeric</title>
      <link>https://nanx.me/blog/post/font-variant-numeric/</link>
      <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/font-variant-numeric/</guid>
      <description>TL;DR: If you use the native font stack (the default in Bootstrap 4+), check the numbers displayed in tables, especially on Apple’s platforms.&#xA;Photo by Jen Theodore.&#xA;A new problem Many of the content creation frameworks that support HTML output in the R world are getting upgraded to Bootstrap 4+:&#xA;Shiny and R Markdown can use bslib to customize Bootstrap version; The three-column Bootstrap style for bookdown projects; The pkgdown 2.</description>
    </item>
    <item>
      <title>More Than 1,500 File Extensions Are Used Inside R Packages</title>
      <link>https://nanx.me/blog/post/cran-file-exts/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/cran-file-exts/</guid>
      <description>The R code to reproduce the results is available from the GitHub repo nanxstats/cran-file-exts.&#xA;Photo by Pawel Czerwinski. When applied correctly, file extensions can be informative. They are the very first clue on handling a specific file without parsing the file content.&#xA;To properly capture and classify files in source R packages, I am interested in learning what file extensions are frequently used by R packages.&#xA;We can achieve this easily by downloading all R packages available from CRAN one at a time and collect the file extensions inside:</description>
    </item>
    <item>
      <title>Rebranding R Packages with Hexagon Stickers: A Minimalist Approach</title>
      <link>https://nanx.me/blog/post/rebranding-r-packages-with-hexagon-stickers/</link>
      <pubDate>Mon, 08 Feb 2021 01:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/rebranding-r-packages-with-hexagon-stickers/</guid>
      <description>A new hex sticker wall of my R packages. I have built a few R packages over the years. I have always been adding some forms of an ad hoc logo to them, trying to make a visual impression. As the portfolio size grows larger, I realized that I would need a principled way to create the logos and refresh my packages’ look. Hexagon stickers seem to be an acceptable form of logos that are heavily used by the R community.</description>
    </item>
    <item>
      <title>Bayesian Lasso with greta</title>
      <link>https://nanx.me/blog/post/bayesian-lasso-with-greta/</link>
      <pubDate>Mon, 07 Dec 2020 20:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/bayesian-lasso-with-greta/</guid>
      <description>The R code to reproduce the results is available from GitHub Gist.&#xA;Horseshoe Bend, Arizona. Photo by Madeline Pere. Although I am not an expert in Bayesian statistics, I always have an idealized version of the framework for Bayesian modeling in my mind:&#xA;Allows defining data models intuitively — preferably in native R. Handles the low-level computations such as MCMC automatically. Works on both CPU and GPU seamlessly would be perfect for 2020.</description>
    </item>
    <item>
      <title>Fuzz Testing Your R Code</title>
      <link>https://nanx.me/blog/post/fuzz-testing-your-r-code/</link>
      <pubDate>Mon, 28 Sep 2020 22:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/fuzz-testing-your-r-code/</guid>
      <description>Good software requires even better testing. Particularly, unit testing has been widely used by many R packages as a tool for reducing the number of bugs and improving code structure. A unit test is often written when a single unit of functionality is created in the program. Is there a good way to test a large program or system after it is created? The answer is yes, and one of the approaches people developed is fuzz testing.</description>
    </item>
    <item>
      <title>Customize Syntax Highlighting for R distill Websites</title>
      <link>https://nanx.me/blog/post/distill-syntax-highlight/</link>
      <pubDate>Fri, 22 May 2020 00:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/distill-syntax-highlight/</guid>
      <description>“Diversity is essential to happiness, and in Utopia there is hardly any.” (Bertrand Russell) Photo by @chuttersnap.&#xA;The Problem The distill (formerly radix) package offers an excellent option in the R Markdown ecosystem to create beautifully typed websites. I was using it one day and looking into customizing the syntax highlighting theme. Then I found this issue:&#xA;I was a bit surprised and sad that there is no easy way to customize it.</description>
    </item>
    <item>
      <title>Disposable Computing with callr</title>
      <link>https://nanx.me/blog/post/disposable-computing-with-callr/</link>
      <pubDate>Sat, 11 Apr 2020 17:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/disposable-computing-with-callr/</guid>
      <description>Photo by @uniqueton.&#xA;Runtime errors can be tricky and costly to resolve for any programming language, and these errors frequently happen when managing (file) connections. Boris posted such an issue when using my R package Rcpi. I rephrase it here as:&#xA;library(&amp;quot;Rcpi&amp;quot;) dir.create(&amp;quot;test&amp;quot;) for (i in 1:2000) { file.copy( system.file(&amp;quot;compseq/DB00530.sdf&amp;quot;, package = &amp;quot;Rcpi&amp;quot;), paste0(&amp;quot;test/&amp;quot;, i, &amp;quot;.sdf&amp;quot;) ) } fns &amp;lt;- list.files(&amp;quot;test/&amp;quot;, pattern = &amp;quot;.sdf$&amp;quot;, full.names = TRUE) for (i in 1:length(fns)) { cat(&amp;quot;\014&amp;quot;, i, &amp;quot;\n&amp;quot;) Rcpi::convMolFormat(infile = fns[i], outfile = &amp;quot;temp.</description>
    </item>
    <item>
      <title>Self-Hosting Shiny Apps with Linode and Cloudflare</title>
      <link>https://nanx.me/blog/post/self-host-shiny-apps/</link>
      <pubDate>Wed, 26 Feb 2020 01:00:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/self-host-shiny-apps/</guid>
      <description>After procrastinating for some time, I finally set up a dedicated self-hosting server, nanx.app, for my public shiny apps. From now on, most of the web applications listed on my software page will be available from two mirrors — the self-hosting server and the public cloud hosting solution shinyapps.io kindly provided by Posit.&#xA;A collection of my shiny apps, now also self-hosted. The Motivation I have built many shiny apps over the years — a few of them are public and open source.</description>
    </item>
    <item>
      <title>New Packages on CRAN: tidycwl and biocompute</title>
      <link>https://nanx.me/blog/post/tidycwl-biocompute/</link>
      <pubDate>Sat, 14 Dec 2019 00:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/tidycwl-biocompute/</guid>
      <description>On the journey of achieving reproducibility in genomic data analysis projects, one often faces challenges with documenting workflows and computations systematically. To provide one way for tackling these problems, we (me and my colleagues) have recently released two new R packages — tidycwl and biocompute — to CRAN.&#xA;tidycwl As the name implies, the package tidycwl aims at offering a native toolchain for R to analyze tools and workflows written in the Common Workflow Language (CWL), while following the tidyverse design principles.</description>
    </item>
    <item>
      <title>Building Regularized Logistic Regressions from Scratch with Computational Graphs in R</title>
      <link>https://nanx.me/blog/post/cgraph-logreg/</link>
      <pubDate>Sun, 06 Oct 2019 00:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/cgraph-logreg/</guid>
      <description>The R package built for this post is available on GitHub: nanxstats/logreg.&#xA;Update 2020-02-11: there has been some major API updates and improvements since cgraph 5.0.0. The logreg package is now updated to reflect these changes. The code example in this post is updated, too.&#xA;As one of the cornerstones for deep learning frameworks, automatic differentiation was briefly mentioned in our previous post. Today let’s focus on the other important piece: the computational graph.</description>
    </item>
    <item>
      <title>A List of Awesome Shiny Extension Packages</title>
      <link>https://nanx.me/blog/post/awesome-shiny-extensions/</link>
      <pubDate>Tue, 04 Dec 2018 14:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/awesome-shiny-extensions/</guid>
      <description>“Everything looks official with tiny leaves around it.” Original photo by Kelli Tungay.&#xA;TL;DR: here is a curated list of R packages that offer extended UI or server components for Shiny: nanxstats/awesome-shiny-extensions. Pull requests welcomed!&#xA;Five years ago, I wrote my first research software paper, and it eventually got published in Bioinformatics. If you know me, it’s probably not surprising that the paper was about an R package and a companion Shiny app.</description>
    </item>
    <item>
      <title>General-Purpose Programming with R</title>
      <link>https://nanx.me/blog/post/general-purpose-programming-with-r/</link>
      <pubDate>Thu, 25 Oct 2018 23:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/general-purpose-programming-with-r/</guid>
      <description>“They’ll take your soul if you let them — don’t let them.” (Carole King, You’ve Got a Friend) Photo by Jelleke Vanooteghem.&#xA;I used R for almost every single computational task I do on my computer in the past ten years. I use R for things that are not simply statistics (pun intended), but everything related to data, or everything that can be done programmatically.&#xA;Recently, I found a fascinating thread posted in the r/rstats subreddit.</description>
    </item>
    <item>
      <title>Implementing Triplet Losses for Implicit Feedback Recommender Systems with R and Keras</title>
      <link>https://nanx.me/blog/post/triplet-loss-r-keras/</link>
      <pubDate>Wed, 29 Aug 2018 19:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/triplet-loss-r-keras/</guid>
      <description>All the R code for this post is available on GitHub: nanxstats/deep-learning-recipes.&#xA;Photo: Three Palms by Jamie Davies&#xA;At the end of our last post, I briefly mentioned that the triplet loss function is a more proper loss designed for both recommendation problems with implicit feedback data and distance metric learning problems. For its importance in solving these practical problems, and also as an excellent programming exercise, I decided to implement it with R and Keras.</description>
    </item>
    <item>
      <title>Prototyping a Recommender System for Binary Implicit Feedback Data with R and Keras</title>
      <link>https://nanx.me/blog/post/recsys-binary-implicit-feedback-r-keras/</link>
      <pubDate>Wed, 22 Aug 2018 17:30:00 +0000</pubDate>
      <guid>https://nanx.me/blog/post/recsys-binary-implicit-feedback-r-keras/</guid>
      <description>Ten years ago, the Netflix prize competition made a significant impact on recommender systems research. In the same time, such benchmark datasets, including MovieLens, are a bit misleading: in reality, implicit feedback data, or binary implicit feedback data (someone interacted with something) could be the best we can have. One to five star ratings type of continuous response data could be challenging to get or impossible to measure.&#xA;Photo: One in A Million by Veronica Benavides</description>
    </item>
  </channel>
</rss>
